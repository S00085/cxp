# [short title of solved problem and solution]

* Status: Accepted 
* Date: [2023-12-10 ]


## Context and Problem Statement

For orchestrating customer journeys, we will use a Journey Orchestrator Microservice. Complex orchestrations requiring greater flexibility will be handled by the external Process Orchestration Engine as extension to Journey Orchestrator Microservice.

## Decision Drivers

* Usabilty 
* Cost optimal solution 
* Strong Community Support 

## Considered Options

Some of the widely recognized process orchestration engines are: Camunda, JBoss jBPM, Kestra , Apache Airflow, AWS Step Functions Microsoft Power Automate, IBM Business Process Manager, Pega BPM etc 
In our context of Customer Management platform due to cost contraints IBM Business Process Manager is excluded


## Decision Outcome

**Why Choose Camunda:**

- **Comprehensive BPMN Support**: Industry-standard modeling for workflow and decision automation.
- **Flexibility and Integration**: Adaptable for various business needs, strong in Java-based ecosystems.
- **User-Friendly Interface**: Accessible for both technical and non-technical users.
- **Scalability**: Efficient in handling complex workflows.
- **Strong Community and Documentation**: Easier implementation and long-term support.

**Use Case Suitability**: Ideal for scenarios requiring detailed workflow modeling and a balance between technical control and user-friendliness. Its capability in complex decision automation processes makes it a strong choice for streamlining and automating multifaceted business processes.

## Pros and Cons of the Options 

### 1. Camunda
- **Functionality**: Strong BPMN, CMMN, and DMN support.
- **Integration**: Good with Java and Spring applications.
- **User Interface**: User-friendly modeler and management console.
- **Use Cases**: Versatile for detailed workflow and decision automation.
- **Community and Support**: Strong community and documentation.

### 2. JBoss jBPM
- **Functionality**: Integrates BPMN with Drools for business rules.
- **Integration**: Good for Java EE and Spring applications.
- **User Interface**: More technical, less intuitive than Camunda.
- **Use Cases**: Suitable for complex rule-based automation.
- **Community and Support**: Good, especially in Red Hat ecosystem.

### 3. Kestra
- **Functionality**: Focuses on data pipelines.
- **Integration**: Strong with data services.
- **User Interface**: Developer-focused.
- **Use Cases**: Best for data-driven workflows and ETL.
- **Community and Support**: Growing community.

### 4. Apache Airflow
- **Functionality**: For scheduling and monitoring data pipelines.
- **Integration**: Strong with data processing tools, Python-centric.
- **User Interface**: Code-based DAGs.
- **Use Cases**: Ideal for data engineering and batch processing.
- **Community and Support**: Large community and plugins.

### 5. AWS Step Functions
- **Functionality**: Serverless orchestration, AWS integration.
- **Integration**: Best within AWS ecosystem.
- **User Interface**: JSON-based state machines, visual designer.
- **Use Cases**: Serverless workflows and microservices.
- **Community and Support**: AWS support.

### 6. Microsoft Power Automate
- **Functionality**: Low-code, routine business task automation.
- **Integration**: Strong with Microsoft and third-party apps.
- **User Interface**: User-friendly, low-code.
- **Use Cases**: Office automation, simple integrations.
- **Community and Support**: Microsoft support.


